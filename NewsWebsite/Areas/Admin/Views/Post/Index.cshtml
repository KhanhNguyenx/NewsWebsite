@using NewsWebsite.Helpers
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Membership List | Able Pro Dashboard Template</title>
    <!-- [Meta] -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimal-ui">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="Able Pro is trending dashboard template made using Bootstrap 5 design framework. Able Pro is available in Bootstrap, React, CodeIgniter, Angular,  and .net Technologies.">
    <meta name="keywords" content="Bootstrap admin template, Dashboard UI Kit, Dashboard Template, Backend Panel, react dashboard, angular dashboard">
    <meta name="author" content="Phoenixcoded">

    <!-- [Favicon] icon -->
    <link rel="icon" href="images/favicon.svg" type="image/x-icon">

    <!-- [Page specific CSS] start -->
    <link rel="stylesheet" href="~/PostIndex/css/style.css">
    <!-- [Page specific CSS] end -->
    <!-- [Font] Family -->
    <link rel="stylesheet" href="~/PostIndex/css/inter.css" id="main-font-link">
    <!-- [phosphor Icons] https://phosphoricons.com/ -->
    <link rel="stylesheet" href="~/PostIndex/css/style_1.css">
    <!-- [Tabler Icons] https://tablericons.com -->
    <link rel="stylesheet" href="~/PostIndex/css/tabler-icons.min.css">
    <!-- [Feather Icons] https://feathericons.com -->
    <link rel="stylesheet" href="~/PostIndex/css/feather.css">
    <!-- [Font Awesome Icons] https://fontawesome.com/icons -->
    <link rel="stylesheet" href="~/PostIndex/css/fontawesome.css">
    <!-- [Material Icons] https://fonts.google.com/icons -->
    <link rel="stylesheet" href="~/PostIndex/css/material.css">
    <!-- [Template CSS Files] -->
    <link rel="stylesheet" href="~/PostIndex/css/style_2.css" id="main-style-link">
    <link rel="stylesheet" href="~/PostIndex/css/style-preset.css">

</head>
<!-- [Head] end -->
<!-- [Body] Start -->
<body data-pc-preset="preset-1" data-pc-sidebar-caption="true" data-pc-direction="ltr" data-pc-theme_contrast="false" data-pc-theme="light">
    <!-- [ Pre-loader ] start -->
    <div class="loader-bg">
        <div class="loader-track">
            <div class="loader-fill"></div>
        </div>
    </div>


    @model List<NewsAPI.DTOs.PostDTO>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Filter options -->
    <div class="d-flex justify-content-end mb-3">
        <select id="category-filter" class="form-control ms-2" style="width: 200px; margin-right: 10px;">
            <option value="">All Categories</option>
            @{
                var categoryList = (ViewBag.CategoryList as List<NewsAPI.DTOs.CategoryDTO>)?.OrderBy(c => c.CategoryName).ToList();
                foreach (var category in categoryList)
                {
                    <option value="@category.CategoryName">@category.CategoryName</option>
                }
            }
        </select>

        <!-- Filter by Views -->
        <select id="view-filter" class="form-control ms-2" style="width: 200px; margin-right: 10px;">
            <option value="">All Views</option>
            <option value="high">Most Viewed</option>
            <option value="low">Least Viewed</option>
        </select>

        <!-- Search input -->
        <div style="margin-right: 10px;">
            <input type="text" id="search-input" class="form-control" placeholder="Search posts by title" style="width: 400px;">
        </div>

        <a href="post/upsert" class="btn btn-primary">
            Add New Post
        </a>
    </div>


    <!-- Posts Table -->

    <div class="table-responsive">
        <table class="table table-hover" id="pc-dt-simple">
            <thead>
                <tr>
                    <th class="col-12 col-md-2">Title</th>
                    <th class="col-12 col-md-2">Category</th>
                    <th class="col-12 col-md-2">View</th>
                    <th class="col-12 col-md-2">Like</th>
                    <th class="col-12 col-md-2">Status</th>
                    <th class="col-12 col-md-2">Hot</th>
                    <th class="col-12 col-md-2">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var post in Model)
                {
                    var currentCategory = (ViewBag.CategoryList as List<NewsAPI.DTOs.CategoryDTO>)?.FirstOrDefault(c => c.Id == post.CategoryId)?.CategoryName ?? "Unknown";
                    <tr data-category="@currentCategory" data-views="@post.Views">
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0">
                                    @{
                                        var postImage = (ViewBag.ImageList as List<NewsAPI.DTOs.ImageDTO>)?.FirstOrDefault(img => img.PostId == post.Id);
                                        var imagePath = postImage != null && !string.IsNullOrEmpty(postImage.ImageUrl)
                                        ? $"/{postImage.ImageUrl}"
                                        : "images/avatar-placeholder.jpg";
                                    }

                                    <img src="@imagePath" alt="post image" class="img-radius wid-40">

                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h6 class="mb-0">@TextHelper.TruncateText(post.Title, 15)</h6>
                                </div>
                            </div>
                        </td>
                        <td>@currentCategory</td>
                        <td>@post.Views</td>
                        <td>@post.LikeNumber</td>
                        <td>
                            <span class="text-@(post.Status == 1 ? "success" : "secondary")">
                                <i class="fas fa-circle f-10 m-r-10"></i>
                                @(post.Status == 1 ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <span class="badge text-bg-@(post.IsHot ? "success" : "secondary")">
                                @(post.IsHot ? "Hot" : "Regular")
                            </span>
                        </td>
                        <td>
                            <a href="/admin/post/upsert/@post.Id" class="avtar avtar-xs btn-link-secondary">
                                <i class="ti ti-edit f-20"></i>
                            </a>
                            <a href="javascript:void(0);" data-id="@post.Id" class="avtar avtar-xs btn-link-secondary delete">
                                <i class="ti ti-trash f-20"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <!-- [ Main Content ] end -->
    <!-- Required Js -->
    <script src="~/PostIndex/js/popper.min.js"></script>
    <script src="~/PostIndex/js/simplebar.min.js"></script>
    <script src="~/PostIndex/js/bootstrap.min.js"></script>
    <script src="~/PostIndex/js/feather.min.js"></script>
    <script src="~/PostIndex/js/custom-font.js"></script>
    <script src="~/PostIndex/js/pcoded.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            if ('false' == "default") {
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    dark_layout = "true";
                } else {
                    dark_layout = 'false';
                }
                layout_change_default();
                if (dark_layout == 'true') {
                    layout_change('dark');
                } else {
                    layout_change('light');
                }
            }
            if ('false' != "default") {
                if ('false' == "true") {
                    layout_change('dark');
                } else {
                    layout_change('light');
                }
            }
            if ('false' == "true") {
                layout_theme_contrast_change('true');
            } else {
                layout_theme_contrast_change('false');
            }
            if ('false' == "true") {
                change_box_container('true');
            } else {
                change_box_container('false');
            }
            if ('true' == "true") {
                layout_caption_change('true');
            } else {
                layout_caption_change('false');
            }
            if ('false' == "true") {
                layout_rtl_change('true');
            } else {
                layout_rtl_change('false');
            }
            if ('preset-1' != "") {
                preset_change('preset-1');
            }
        });
    </script>

    <script>
        function normalizeText(text) {
            return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        }

        document.getElementById('search-input').addEventListener('input', filterPosts);
        document.getElementById('category-filter').addEventListener('change', filterPosts);
        document.getElementById('view-filter').addEventListener('change', filterPosts);

        function filterPosts() {
            const searchValue = normalizeText(document.getElementById('search-input').value);
            const selectedCategory = document.getElementById('category-filter').value;
            const viewFilter = document.getElementById('view-filter').value;

            const tableRows = document.querySelectorAll('#pc-dt-simple tbody tr');

            // Sort rows by views if a view filter is selected
            if (viewFilter) {
                const rowsArray = Array.from(tableRows);
                rowsArray.sort((a, b) => {
                    const aViews = parseInt(a.dataset.views);
                    const bViews = parseInt(b.dataset.views);
                    return viewFilter === 'high' ? bViews - aViews : aViews - bViews;
                });
                rowsArray.forEach(row => row.parentNode.appendChild(row)); // Append sorted rows back to tbody
            }

            // Filter each row based on search, category, and views
            tableRows.forEach(row => {
                const titleCell = row.querySelector('td h6').textContent;
                const category = row.getAttribute('data-category');
                const views = parseInt(row.getAttribute('data-views'));

                const matchesSearch = normalizeText(titleCell).includes(searchValue);
                const matchesCategory = !selectedCategory || category === selectedCategory;
                const matchesViewFilter = !viewFilter || (viewFilter === 'high' ? views > 0 : views >= 0);

                if (matchesSearch && matchesCategory && matchesViewFilter) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
    </script>

    <!-- Delete Ajax -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.delete').on('click', function () {
                var Id = $(this).data('id'); // Lấy ID từ thuộc tính data-id
                var confirmation = confirm('Bạn có chắc chắn muốn xóa danh mục này?');

                if (confirmation) {
                    $.ajax({
                        url: '/Posts/UpDelete?id=' + Id, // Đường dẫn đến API xóa
                        type: 'DELETE', // Phương thức DELETE
                        success: function (result) {
                            alert('Danh mục đã được xóa thành công.');
                            location.reload(); // Tải lại trang để cập nhật danh sách
                        },
                        error: function (xhr, status, error) {
                            alert('Có lỗi xảy ra: ' + xhr.responseText);
                        }
                    });
                }
            });
        });
    </script>
    <script>
        let debounceTimeout;

        // Lắng nghe sự kiện gõ phím trên ô tìm kiếm
        document.getElementById("search-input").addEventListener("keyup", function () {
            const query = this.value.trim();
            clearTimeout(debounceTimeout);

            // Đặt debounce 300ms
            debounceTimeout = setTimeout(() => {
                performSearch(query);
            }, 300);
        });

        // Hàm thực hiện tìm kiếm hoặc tải mặc định
        async function performSearch(query) {
            const tableBody = document.querySelector("#pc-dt-simple tbody");

            // Kiểm tra nếu không có từ khóa
            if (query.length === 0) {
                loadDefaultPosts(); // Gọi hàm tải bài viết mặc định
                return;
            }

            try {
                const response = await fetch(`/posts/search?txtSearch=${encodeURIComponent(query)}`);
                if (response.ok) {
                    const posts = await response.json();
                    renderTable(posts);
                } else {
                    tableBody.innerHTML = `<tr><td colspan="7">No posts found.</td></tr>`;
                }
            } catch (error) {
                console.error("Error fetching search results:", error);
                tableBody.innerHTML = `<tr><td colspan="7">Error occurred while searching.</td></tr>`;
            }
        }

        // Hàm tải lại danh sách bài viết mặc định
        async function loadDefaultPosts() {
            const tableBody = document.querySelector("#pc-dt-simple tbody");

            try {
                const response = await fetch("/posts/getlist");
                if (response.ok) {
                    const posts = await response.json();
                    renderTable(posts);
                } else {
                    tableBody.innerHTML = `<tr><td colspan="7">Failed to load default posts.</td></tr>`;
                }
            } catch (error) {
                console.error("Error loading default posts:", error);
                tableBody.innerHTML = `<tr><td colspan="7">Error occurred while loading default posts.</td></tr>`;
            }
        }

        // Hàm render bảng bài viết
        function renderTable(posts) {
            const tableBody = document.querySelector("#pc-dt-simple tbody");

            if (posts.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="7">No posts found.</td></tr>`;
                return;
            }

            const categoryList = JSON.parse(document.getElementById("category-data").textContent);
            const imageList = JSON.parse(document.getElementById("image-data").textContent);

            const rowsHtml = posts
                .map((post) => {
                    const currentCategory =
                        categoryList.find((category) => category.id === post.categoryId)?.categoryName || "Unknown";

                    const postImage = imageList.find((image) => image.postId === post.id)?.imageUrl || "images/avatar-placeholder.jpg";

                    return `
                                    <tr data-category="${currentCategory}" data-views="${post.views}">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="flex-shrink-0">
                                                    <img src="/${postImage}" alt="post image" class="img-radius wid-40">
                                                </div>
                                                <div class="flex-grow-1 ms-3">
                                                    <h6 class="mb-0">${post.title}</h6>
                                                </div>
                                            </div>
                                        </td>
                                        <td>${currentCategory}</td>
                                        <td>${post.views}</td>
                                        <td>${post.likeNumber}</td>
                                        <td>
                                            <span class="text-${post.status === 1 ? "success" : "secondary"}">
                                                <i class="fas fa-circle f-10 m-r-10"></i>
                                                ${post.status === 1 ? "Active" : "Inactive"}
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge text-bg-${post.isHot ? "success" : "secondary"}">
                                                ${post.isHot ? "Hot" : "Regular"}
                                            </span>
                                        </td>
                                        <td>
                                            <a href="/admin/post/upsert/${post.id}" class="avtar avtar-xs btn-link-secondary">
                                                <i class="ti ti-edit f-20"></i>
                                            </a>
                                            <a href="javascript:void(0);" data-id="${post.id}" class="avtar avtar-xs btn-link-secondary delete">
                                                <i class="ti ti-trash f-20"></i>
                                            </a>
                                        </td>
                                    </tr>`;
                })
                .join("");

            tableBody.innerHTML = rowsHtml;
        }
    </script>

    <!-- JSON data for categories -->
    <script id="category-data" type="application/json">
        @Html.Raw(Json.Serialize(ViewBag.CategoryList ?? new List<NewsAPI.DTOs.CategoryDTO>()))
    </script>

    <!-- JSON data for images -->
    <script id="image-data" type="application/json">
        @Html.Raw(Json.Serialize(ViewBag.ImageList ?? new List<NewsAPI.DTOs.ImageDTO>()))
    </script>


</body>
</html>